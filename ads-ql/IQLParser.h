/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : IQL.g
 *     -                            On : 2021-12-16 15:08:08
 *     -                for the parser : IQLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser IQLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pIQLParser, which is returned from a call to IQLParserNew().
 *
 * The methods in pIQLParser are  as follows:
 *
 *  - IQLParser_graph_return      pIQLParser->graph(pIQLParser)
 *  - IQLParser_graphStatement_return      pIQLParser->graphStatement(pIQLParser)
 *  - IQLParser_node_return      pIQLParser->node(pIQLParser)
 *  - IQLParser_nodeParams_return      pIQLParser->nodeParams(pIQLParser)
 *  - IQLParser_nodeParam_return      pIQLParser->nodeParam(pIQLParser)
 *  - IQLParser_edge_return      pIQLParser->edge(pIQLParser)
 *  - IQLParser_singleExpression_return      pIQLParser->singleExpression(pIQLParser)
 *  - IQLParser_declareStatement_return      pIQLParser->declareStatement(pIQLParser)
 *  - IQLParser_returnExpression_return      pIQLParser->returnExpression(pIQLParser)
 *  - IQLParser_recordConstructor_return      pIQLParser->recordConstructor(pIQLParser)
 *  - IQLParser_fieldConstructor_return      pIQLParser->fieldConstructor(pIQLParser)
 *  - IQLParser_recordFormat_return      pIQLParser->recordFormat(pIQLParser)
 *  - IQLParser_fieldFormat_return      pIQLParser->fieldFormat(pIQLParser)
 *  - IQLParser_localVarOrId_return      pIQLParser->localVarOrId(pIQLParser)
 *  - IQLParser_statementList_return      pIQLParser->statementList(pIQLParser)
 *  - IQLParser_statement_return      pIQLParser->statement(pIQLParser)
 *  - IQLParser_variableDeclaration_return      pIQLParser->variableDeclaration(pIQLParser)
 *  - IQLParser_builtInTypeNoNull_return      pIQLParser->builtInTypeNoNull(pIQLParser)
 *  - IQLParser_builtInType_return      pIQLParser->builtInType(pIQLParser)
 *  - IQLParser_arrayTypeSpec_return      pIQLParser->arrayTypeSpec(pIQLParser)
 *  - IQLParser_typeNullability_return      pIQLParser->typeNullability(pIQLParser)
 *  - IQLParser_setStatement_return      pIQLParser->setStatement(pIQLParser)
 *  - IQLParser_variableRef_return      pIQLParser->variableRef(pIQLParser)
 *  - IQLParser_switchStatement_return      pIQLParser->switchStatement(pIQLParser)
 *  - IQLParser_switchBlock_return      pIQLParser->switchBlock(pIQLParser)
 *  - IQLParser_printStatement_return      pIQLParser->printStatement(pIQLParser)
 *  - IQLParser_ifStatement_return      pIQLParser->ifStatement(pIQLParser)
 *  - IQLParser_statementBlock_return      pIQLParser->statementBlock(pIQLParser)
 *  - IQLParser_whileStatement_return      pIQLParser->whileStatement(pIQLParser)
 *  - IQLParser_keyDo_return      pIQLParser->keyDo(pIQLParser)
 *  - IQLParser_whileStatementList_return      pIQLParser->whileStatementList(pIQLParser)
 *  - IQLParser_expression_return      pIQLParser->expression(pIQLParser)
 *  - IQLParser_ternaryChoiceExpression_return      pIQLParser->ternaryChoiceExpression(pIQLParser)
 *  - IQLParser_weakExpression_return      pIQLParser->weakExpression(pIQLParser)
 *  - IQLParser_conjunctiveExpression_return      pIQLParser->conjunctiveExpression(pIQLParser)
 *  - IQLParser_negatedExpression_return      pIQLParser->negatedExpression(pIQLParser)
 *  - IQLParser_isNullExpression_return      pIQLParser->isNullExpression(pIQLParser)
 *  - IQLParser_bitwiseExpression_return      pIQLParser->bitwiseExpression(pIQLParser)
 *  - IQLParser_conditionalExpression_return      pIQLParser->conditionalExpression(pIQLParser)
 *  - IQLParser_additiveExpression_return      pIQLParser->additiveExpression(pIQLParser)
 *  - IQLParser_multiplicativeExpression_return      pIQLParser->multiplicativeExpression(pIQLParser)
 *  - IQLParser_unaryExpression_return      pIQLParser->unaryExpression(pIQLParser)
 *  - IQLParser_unaryExpressionNotPlusMinus_return      pIQLParser->unaryExpressionNotPlusMinus(pIQLParser)
 *  - IQLParser_postfixExpression_return      pIQLParser->postfixExpression(pIQLParser)
 *  - IQLParser_aggregateFunction_return      pIQLParser->aggregateFunction(pIQLParser)
 *  - IQLParser_caseExpression_return      pIQLParser->caseExpression(pIQLParser)
 *  - IQLParser_whenExpression2_return      pIQLParser->whenExpression2(pIQLParser)
 *  - IQLParser_whenExpression3_return      pIQLParser->whenExpression3(pIQLParser)
 *  - IQLParser_elseExpression3_return      pIQLParser->elseExpression3(pIQLParser)
 *  - IQLParser_whenExpression_return      pIQLParser->whenExpression(pIQLParser)
 *  - IQLParser_elseExpression_return      pIQLParser->elseExpression(pIQLParser)
 *  - IQLParser_intervalExpression_return      pIQLParser->intervalExpression(pIQLParser)
 *  - IQLParser_castExpression_return      pIQLParser->castExpression(pIQLParser)
 *  - IQLParser_argList_return      pIQLParser->argList(pIQLParser)
 *  - IQLParser_expressionList_return      pIQLParser->expressionList(pIQLParser)
 *  - IQLParser_primaryExpression_return      pIQLParser->primaryExpression(pIQLParser)
 *  - IQLParser_arrayConstructor_return      pIQLParser->arrayConstructor(pIQLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_IQLParser_H
#define _IQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct IQLParser_Ctx_struct IQLParser, * pIQLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct IQLParser_graph_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_graph_return;

typedef struct IQLParser_graphStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_graphStatement_return;

typedef struct IQLParser_node_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_node_return;

typedef struct IQLParser_nodeParams_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_nodeParams_return;

typedef struct IQLParser_nodeParam_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_nodeParam_return;

typedef struct IQLParser_edge_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_edge_return;

typedef struct IQLParser_singleExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_singleExpression_return;

typedef struct IQLParser_declareStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_declareStatement_return;

typedef struct IQLParser_returnExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_returnExpression_return;

typedef struct IQLParser_recordConstructor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_recordConstructor_return;

typedef struct IQLParser_fieldConstructor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_fieldConstructor_return;

typedef struct IQLParser_recordFormat_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_recordFormat_return;

typedef struct IQLParser_fieldFormat_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_fieldFormat_return;

typedef struct IQLParser_localVarOrId_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_localVarOrId_return;

typedef struct IQLParser_statementList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_statementList_return;

typedef struct IQLParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_statement_return;

typedef struct IQLParser_variableDeclaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_variableDeclaration_return;

typedef struct IQLParser_builtInTypeNoNull_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_builtInTypeNoNull_return;

typedef struct IQLParser_builtInType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_builtInType_return;

typedef struct IQLParser_arrayTypeSpec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_arrayTypeSpec_return;

typedef struct IQLParser_typeNullability_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_typeNullability_return;

typedef struct IQLParser_setStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_setStatement_return;

typedef struct IQLParser_variableRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_variableRef_return;

typedef struct IQLParser_switchStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_switchStatement_return;

typedef struct IQLParser_switchBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_switchBlock_return;

typedef struct IQLParser_printStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_printStatement_return;

typedef struct IQLParser_ifStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_ifStatement_return;

typedef struct IQLParser_statementBlock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_statementBlock_return;

typedef struct IQLParser_whileStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_whileStatement_return;

typedef struct IQLParser_keyDo_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_keyDo_return;

typedef struct IQLParser_whileStatementList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_whileStatementList_return;

typedef struct IQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_expression_return;

typedef struct IQLParser_ternaryChoiceExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_ternaryChoiceExpression_return;

typedef struct IQLParser_weakExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_weakExpression_return;

typedef struct IQLParser_conjunctiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_conjunctiveExpression_return;

typedef struct IQLParser_negatedExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_negatedExpression_return;

typedef struct IQLParser_isNullExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_isNullExpression_return;

typedef struct IQLParser_bitwiseExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_bitwiseExpression_return;

typedef struct IQLParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_conditionalExpression_return;

typedef struct IQLParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_additiveExpression_return;

typedef struct IQLParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_multiplicativeExpression_return;

typedef struct IQLParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_unaryExpression_return;

typedef struct IQLParser_unaryExpressionNotPlusMinus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_unaryExpressionNotPlusMinus_return;

typedef struct IQLParser_postfixExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_postfixExpression_return;

typedef struct IQLParser_aggregateFunction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_aggregateFunction_return;

typedef struct IQLParser_caseExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_caseExpression_return;

typedef struct IQLParser_whenExpression2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_whenExpression2_return;

typedef struct IQLParser_whenExpression3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_whenExpression3_return;

typedef struct IQLParser_elseExpression3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_elseExpression3_return;

typedef struct IQLParser_whenExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_whenExpression_return;

typedef struct IQLParser_elseExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_elseExpression_return;

typedef struct IQLParser_intervalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_intervalExpression_return;

typedef struct IQLParser_castExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_castExpression_return;

typedef struct IQLParser_argList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_argList_return;

typedef struct IQLParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_expressionList_return;

typedef struct IQLParser_primaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_primaryExpression_return;

typedef struct IQLParser_arrayConstructor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    IQLParser_arrayConstructor_return;



/** Context tracking structure for IQLParser
 */
struct IQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     IQLParser_graph_return (*graph)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_graphStatement_return (*graphStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_node_return (*node)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_nodeParams_return (*nodeParams)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_nodeParam_return (*nodeParam)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_edge_return (*edge)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_singleExpression_return (*singleExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_declareStatement_return (*declareStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_returnExpression_return (*returnExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_recordConstructor_return (*recordConstructor)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_fieldConstructor_return (*fieldConstructor)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_recordFormat_return (*recordFormat)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_fieldFormat_return (*fieldFormat)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_localVarOrId_return (*localVarOrId)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_statementList_return (*statementList)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_statement_return (*statement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_variableDeclaration_return (*variableDeclaration)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_builtInTypeNoNull_return (*builtInTypeNoNull)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_builtInType_return (*builtInType)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_arrayTypeSpec_return (*arrayTypeSpec)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_typeNullability_return (*typeNullability)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_setStatement_return (*setStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_variableRef_return (*variableRef)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_switchStatement_return (*switchStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_switchBlock_return (*switchBlock)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_printStatement_return (*printStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_ifStatement_return (*ifStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_statementBlock_return (*statementBlock)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_whileStatement_return (*whileStatement)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_keyDo_return (*keyDo)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_whileStatementList_return (*whileStatementList)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_expression_return (*expression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_ternaryChoiceExpression_return (*ternaryChoiceExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_weakExpression_return (*weakExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_conjunctiveExpression_return (*conjunctiveExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_negatedExpression_return (*negatedExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_isNullExpression_return (*isNullExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_bitwiseExpression_return (*bitwiseExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_conditionalExpression_return (*conditionalExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_additiveExpression_return (*additiveExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_multiplicativeExpression_return (*multiplicativeExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_unaryExpression_return (*unaryExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_unaryExpressionNotPlusMinus_return (*unaryExpressionNotPlusMinus)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_postfixExpression_return (*postfixExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_aggregateFunction_return (*aggregateFunction)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_caseExpression_return (*caseExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_whenExpression2_return (*whenExpression2)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_whenExpression3_return (*whenExpression3)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_elseExpression3_return (*elseExpression3)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_whenExpression_return (*whenExpression)	(struct IQLParser_Ctx_struct * ctx, int isSimple);
     IQLParser_elseExpression_return (*elseExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_intervalExpression_return (*intervalExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_castExpression_return (*castExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_argList_return (*argList)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_expressionList_return (*expressionList)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_primaryExpression_return (*primaryExpression)	(struct IQLParser_Ctx_struct * ctx);
     IQLParser_arrayConstructor_return (*arrayConstructor)	(struct IQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred108_IQL)	(struct IQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred146_IQL)	(struct IQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred153_IQL)	(struct IQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred154_IQL)	(struct IQLParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct IQLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pIQLParser IQLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pIQLParser IQLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define T__144      144
#define T__143      143
#define T__146      146
#define T__145      145
#define T__140      140
#define TK_DECIMAL      24
#define TK_ALTER      70
#define T__142      142
#define T__141      141
#define TK_PRECISION      20
#define TK_DISTINCT      81
#define TK_THEN      55
#define HEX_INTEGER_LITERAL      59
#define TK_CREATE      78
#define TK_CROSS      79
#define TK_INTERVAL      56
#define TK_BIGINT      27
#define TK_GROUP      86
#define TK_JOIN      92
#define TK_WHILE      45
#define TK_CASE      41
#define DATETIME_LITERAL      6
#define ID      8
#define T__137      137
#define TK_BOOLEAN      25
#define T__136      136
#define TK_ADD      68
#define TK_ALL      69
#define T__139      139
#define T__138      138
#define T__133      133
#define T__132      132
#define IPV6_LITERAL      64
#define T__135      135
#define TK_SMALLINT      28
#define T__134      134
#define T__131      131
#define TK_IF      43
#define T__130      130
#define TK_IPV4      31
#define TK_LEFT      94
#define TK_IPV6      33
#define TK_RIGHT      101
#define TK_BREAK      15
#define TK_ASC      72
#define TK_IN      88
#define TK_IS      48
#define TK_RLIKE      50
#define T__129      129
#define TK_AS      12
#define UNICODE_ESCAPE      109
#define T__126      126
#define T__125      125
#define T__128      128
#define T__127      127
#define TK_TINYINT      29
#define TK_RETURN      14
#define TK_COALESCE      76
#define TK_FUNCTION      85
#define TK_OUTPUT      98
#define TK_AND      47
#define TK_AVG      73
#define TK_NOT      36
#define TK_FALSE      66
#define WSTRING_LITERAL      62
#define TK_SOME      104
#define TK_ROW      102
#define TK_END      40
#define CASE_NO_ELSE      4
#define TK_ARRAY      67
#define TK_INTEGER      18
#define TK_COUNT      77
#define TK_OUTER      97
#define TK_ON      95
#define TK_WITH      107
#define FLOATING_POINT_LITERAL      60
#define TK_OR      46
#define TK_INDEX      89
#define SL_COMMENT      114
#define EXPONENT      118
#define T__147      147
#define DECIMAL_LITERAL      61
#define TK_REAL      30
#define DECIMAL_BIGINT_LITERAL      7
#define TK_CIDRV6      34
#define TK_CIDRV4      32
#define TK_VARCHAR      22
#define ESCAPE_SEQUENCE      108
#define TK_FROM      83
#define TK_ORDER      96
#define DOUBLE_QUOTED_STRING_LITERAL      10
#define TK_SWITCH      38
#define TK_HAVING      87
#define TK_ANY      71
#define TK_RETURNS      100
#define TK_WHERE      106
#define TK_UNION      105
#define TK_CONTINUE      16
#define TK_NULL      35
#define TK_SELECT      103
#define TK_EXISTS      82
#define THREE_DIGIT_NUMBER      116
#define TK_FULL      84
#define TK_BETWEEN      74
#define TK_PROCEDURE      99
#define IPV4_LITERAL      63
#define TK_DESC      80
#define TK_LIKE      49
#define TK_TRUE      65
#define T__122      122
#define TK_DATETIME      26
#define T__121      121
#define T__124      124
#define T__123      123
#define DECIMAL_INTEGER_LITERAL      9
#define TK_PRINT      42
#define T__120      120
#define TK_SUM      51
#define TK_INTO      91
#define OCTAL_ESCAPE      110
#define BIGINT_SUFFIX      115
#define TK_MIN      53
#define TK_KEY      93
#define TK_MAX      52
#define HEX_DIGIT      111
#define TK_BY      75
#define WS      112
#define EOF      -1
#define FOUR_DIGIT_HEX      117
#define TK_SET      37
#define TK_NVARCHAR      23
#define TK_ELSE      44
#define TK_CAST      57
#define TK_WHEN      54
#define QUOTED_ID      13
#define TK_DECLARE      11
#define LITERAL_CAST      5
#define FLOAT_SUFFIX      119
#define TK_BEGIN      39
#define TK_INNER      90
#define ML_COMMENT      113
#define TK_RAISERROR      17
#define STRING_LITERAL      58
#define TK_DOUBLE      19
#define TK_CHAR      21
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for IQLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
